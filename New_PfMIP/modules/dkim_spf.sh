#!/bin/bash

# =================================================================
# DKIM AND SPF CONFIGURATION MODULE
# Email authentication setup for deliverability
# =================================================================

# Setup OpenDKIM for email authentication
setup_opendkim() {
    local domain=$1
    
    print_header "Setting Up OpenDKIM for Email Authentication"
    
    # Install OpenDKIM packages
    print_message "Installing OpenDKIM..."
    apt-get update
    apt-get install -y opendkim opendkim-tools
    
    # Stop OpenDKIM during configuration
    systemctl stop opendkim 2>/dev/null || true
    
    # Create directories
    mkdir -p /etc/opendkim/keys
    chown -R opendkim:opendkim /etc/opendkim
    
    # CRITICAL: Remove old keys if they exist to ensure fresh generation
    if [ -d "/etc/opendkim/keys/${domain}" ]; then
        print_warning "Removing old DKIM keys for ${domain}..."
        rm -rf "/etc/opendkim/keys/${domain}"
    fi
    
    # Generate signing key for the domain
    print_message "Generating DKIM keys for ${domain}..."
    mkdir -p /etc/opendkim/keys/${domain}
    cd /etc/opendkim/keys/${domain}
    
    # Generate 2048-bit key (recommended for compatibility)
    opendkim-genkey -b 2048 -s mail -d ${domain}
    
    # Ensure proper ownership and permissions
    chown opendkim:opendkim mail.private
    chmod 600 mail.private
    chown opendkim:opendkim mail.txt
    chmod 644 mail.txt
    
    # Configure OpenDKIM main config with proper settings
    cat > /etc/opendkim.conf <<EOF
# OpenDKIM Configuration
# Generated by Mail Server Installer

# Basic settings
AutoRestart             Yes
AutoRestartRate         10/1h
UMask                   002
Syslog                  Yes
SyslogSuccess           Yes
LogWhy                  Yes

# Signing/Verification
Mode                    sv
Canonicalization        relaxed/simple
ExternalIgnoreList      refile:/etc/opendkim/TrustedHosts
InternalHosts           refile:/etc/opendkim/TrustedHosts
KeyTable                refile:/etc/opendkim/KeyTable
SigningTable            refile:/etc/opendkim/SigningTable
SignatureAlgorithm      rsa-sha256

# Socket
Socket                  inet:8891@localhost
PidFile                 /run/opendkim/opendkim.pid

# User
UserID                  opendkim:opendkim
TemporaryDirectory      /tmp

# Additional settings
OversignHeaders         From
TrustAnchorFile         /usr/share/dns/root.key

# CRITICAL: Ensure proper time handling
ClockDrift              300
EOF
    
    # Setup trusted hosts (all server IPs and localhost)
    cat > /etc/opendkim/TrustedHosts <<EOF
127.0.0.1
::1
localhost
${domain}
*.${domain}
EOF
    
    # Add all configured server IPs to trusted hosts
    if [ ! -z "${IP_ADDRESSES}" ]; then
        for ip in ${IP_ADDRESSES[@]}; do
            echo "$ip" >> /etc/opendkim/TrustedHosts
        done
    fi
    
    # Setup key table with ABSOLUTE path
    echo "mail._domainkey.${domain} ${domain}:mail:/etc/opendkim/keys/${domain}/mail.private" > /etc/opendkim/KeyTable
    
    # Setup signing table for all addresses at domain
    cat > /etc/opendkim/SigningTable <<EOF
*@${domain} mail._domainkey.${domain}
*@*.${domain} mail._domainkey.${domain}
EOF
    
    # Set proper permissions
    chown opendkim:opendkim /etc/opendkim/TrustedHosts
    chown opendkim:opendkim /etc/opendkim/KeyTable
    chown opendkim:opendkim /etc/opendkim/SigningTable
    chmod 644 /etc/opendkim/TrustedHosts
    chmod 644 /etc/opendkim/KeyTable
    chmod 644 /etc/opendkim/SigningTable
    
    # Configure Postfix to use OpenDKIM
    print_message "Configuring Postfix to use OpenDKIM..."
    postconf -e "milter_protocol = 6"
    postconf -e "milter_default_action = accept"
    postconf -e "smtpd_milters = inet:localhost:8891"
    postconf -e "non_smtpd_milters = inet:localhost:8891"
    
    # Configure default socket
    cat > /etc/default/opendkim <<EOF
# OpenDKIM default configuration
RUNDIR=/run/opendkim
SOCKET="inet:8891@localhost"
USER=opendkim
GROUP=opendkim
PIDFILE=\$RUNDIR/opendkim.pid
EXTRAAFTER=
EOF
    
    # Start and enable OpenDKIM
    systemctl daemon-reload
    systemctl start opendkim
    systemctl enable opendkim
    
    # Wait for OpenDKIM to fully start
    sleep 3
    
    # Restart Postfix to apply changes
    systemctl restart postfix
    
    # Extract and display DKIM record - FIXED to show complete key
    print_header "DKIM Configuration Complete!"
    print_message "Add the following DNS TXT record for DKIM:"
    echo ""
    echo "=========================================="
    echo "DNS Record Type: TXT"
    echo "Name: mail._domainkey"
    echo "Value:"
    
    # CRITICAL FIX: Extract the COMPLETE public key from mail.txt
    # The key is in quotes and may span multiple lines
    local dkim_record=$(cat /etc/opendkim/keys/${domain}/mail.txt | \
                        grep -v '^;' | \
                        sed 's/.*"v=DKIM1/v=DKIM1/' | \
                        sed 's/"[[:space:]]*"//g' | \
                        sed 's/"[[:space:]]*$//' | \
                        tr -d '\n\t\r' | \
                        sed 's/[[:space:]]\+/ /g')
    
    echo "$dkim_record"
    echo "=========================================="
    echo ""
    
    # Save COMPLETE DKIM record to file
    cat > /root/dkim-record-${domain}.txt <<EOF
DKIM DNS Record for ${domain}
Generated: $(date)

IMPORTANT: This is the COMPLETE DKIM record. Make sure to add it in its entirety!

Add this TXT record to your DNS:
Name: mail._domainkey
Value: ${dkim_record}

VERIFICATION STEPS:
1. After adding to DNS, wait 5-10 minutes for propagation
2. Test with: dig TXT mail._domainkey.${domain} @8.8.8.8
3. Verify with: opendkim-testkey -d ${domain} -s mail -vvv
4. Send a test email to check-auth@verifier.port25.com

The raw key file is located at: /etc/opendkim/keys/${domain}/mail.txt
EOF
    
    # Also create a separate file with just the p= value for debugging
    local just_key=$(echo "$dkim_record" | grep -oP 'p=\K[^;]+' | tr -d ' ')
    cat > /root/dkim-key-only-${domain}.txt <<EOF
DKIM Public Key Only (p= value) for ${domain}
Generated: $(date)

${just_key}

This should be one continuous string with no spaces or line breaks.
Length: $(echo -n "$just_key" | wc -c) characters
EOF
    
    print_message "DKIM record saved to: /root/dkim-record-${domain}.txt"
    print_message "Key only saved to: /root/dkim-key-only-${domain}.txt"
    
    # Verify the key file is readable
    if [ -f "/etc/opendkim/keys/${domain}/mail.private" ]; then
        print_message "✓ Private key exists and is readable"
    else
        print_error "✗ Private key not found or not readable!"
    fi
    
    # Test OpenDKIM is responding
    if nc -zv localhost 8891 2>&1 | grep -q succeeded; then
        print_message "✓ OpenDKIM is listening on port 8891"
    else
        print_error "✗ OpenDKIM is not responding on port 8891"
    fi
    
    return 0
}

# Function to get DKIM public key value for DNS - FIXED VERSION
get_dkim_value() {
    local domain=$1
    local key_file="/etc/opendkim/keys/${domain}/mail.txt"
    
    if [ -f "$key_file" ]; then
        # Extract the COMPLETE public key - handle multi-line format
        cat "$key_file" | \
            grep -v '^;' | \
            sed 's/.*"v=DKIM1/v=DKIM1/' | \
            sed 's/"[[:space:]]*"//g' | \
            sed 's/"[[:space:]]*$//' | \
            tr -d '\n\t\r' | \
            sed 's/[[:space:]]\+/ /g'
    else
        echo ""
    fi
}

# Function to regenerate DKIM keys if needed
regenerate_dkim_keys() {
    local domain=$1
    
    print_header "Regenerating DKIM Keys"
    
    # Stop services
    systemctl stop opendkim
    systemctl stop postfix
    
    # Backup old keys
    if [ -d "/etc/opendkim/keys/${domain}" ]; then
        mv "/etc/opendkim/keys/${domain}" "/etc/opendkim/keys/${domain}.backup.$(date +%Y%m%d%H%M%S)"
    fi
    
    # Generate new keys
    mkdir -p /etc/opendkim/keys/${domain}
    cd /etc/opendkim/keys/${domain}
    opendkim-genkey -b 2048 -s mail -d ${domain}
    chown -R opendkim:opendkim /etc/opendkim/keys/${domain}
    chmod 600 mail.private
    chmod 644 mail.txt
    
    # Restart services
    systemctl start opendkim
    systemctl start postfix
    
    # Show new key
    print_message "New DKIM key generated. Update your DNS with:"
    cat mail.txt
}

# Setup SPF record
setup_spf() {
    local domain=$1
    
    print_header "SPF Configuration"
    
    # Build SPF record with all IPs
    local spf_record="v=spf1"
    
    # Add all server IPs
    if [ ! -z "${IP_ADDRESSES}" ]; then
        for ip in ${IP_ADDRESSES[@]}; do
            # Check if IPv4 or IPv6
            if [[ $ip =~ .*:.* ]]; then
                spf_record="${spf_record} ip6:${ip}"
            else
                spf_record="${spf_record} ip4:${ip}"
            fi
        done
    fi
    
    # Add domain and finish record
    spf_record="${spf_record} mx a ~all"
    
    print_message "Add the following DNS TXT record for SPF:"
    echo ""
    echo "=========================================="
    echo "DNS Record Type: TXT"
    echo "Name: @ (or ${domain})"
    echo "Value: ${spf_record}"
    echo "=========================================="
    echo ""
    
    # Save SPF record to file
    cat > /root/spf-record-${domain}.txt <<EOF
SPF DNS Record for ${domain}
Generated: $(date)

Add this TXT record to your DNS:
Name: @ (or ${domain})
Value: ${spf_record}
EOF
    
    print_message "SPF record saved to: /root/spf-record-${domain}.txt"
    
    return 0
}

# Setup DMARC record
setup_dmarc() {
    local domain=$1
    local email="postmaster@${domain}"
    
    print_header "DMARC Configuration"
    
    local dmarc_record="v=DMARC1; p=quarantine; rua=mailto:${email}; ruf=mailto:${email}; fo=1; adkim=r; aspf=r; pct=100; rf=afrf; ri=86400"
    
    print_message "Add the following DNS TXT record for DMARC:"
    echo ""
    echo "=========================================="
    echo "DNS Record Type: TXT"
    echo "Name: _dmarc"
    echo "Value: ${dmarc_record}"
    echo "=========================================="
    echo ""
    
    # Save DMARC record to file
    cat > /root/dmarc-record-${domain}.txt <<EOF
DMARC DNS Record for ${domain}
Generated: $(date)

Add this TXT record to your DNS:
Name: _dmarc
Value: ${dmarc_record}
EOF
    
    print_message "DMARC record saved to: /root/dmarc-record-${domain}.txt"
    
    return 0
}

# Function to verify DKIM is working - ENHANCED
verify_dkim() {
    local domain=$1
    
    print_header "Verifying DKIM Configuration"
    
    # Check if OpenDKIM is running
    if systemctl is-active --quiet opendkim; then
        print_message "✓ OpenDKIM service is running"
    else
        print_error "✗ OpenDKIM service is not running"
        return 1
    fi
    
    # Check if key files exist
    if [ -f "/etc/opendkim/keys/${domain}/mail.private" ]; then
        print_message "✓ Private key exists"
    else
        print_error "✗ Private key not found"
        return 1
    fi
    
    if [ -f "/etc/opendkim/keys/${domain}/mail.txt" ]; then
        print_message "✓ Public key file exists"
        
        # Show the actual key for verification
        print_message "Public key content:"
        cat "/etc/opendkim/keys/${domain}/mail.txt"
    else
        print_error "✗ Public key file not found"
        return 1
    fi
    
    # Test OpenDKIM configuration
    print_message "Testing DKIM key..."
    opendkim-testkey -d ${domain} -s mail -vvv 2>&1 | while read line; do
        if echo "$line" | grep -q "key OK"; then
            print_message "✓ DKIM key is valid and DNS record found"
        elif echo "$line" | grep -q "key not secure"; then
            print_warning "⚠ DKIM key found but DNSSEC not enabled (this is usually OK)"
        elif echo "$line" | grep -q "query timed out"; then
            print_warning "⚠ DNS query timed out - record may not be propagated yet"
        fi
        echo "  $line"
    done
    
    return 0
}

# Create a utility script for DKIM troubleshooting
create_dkim_troubleshoot_script() {
    cat > /usr/local/bin/dkim-troubleshoot <<'EOF'
#!/bin/bash

DOMAIN="${1:-$(hostname -d)}"

echo "DKIM Troubleshooting for domain: $DOMAIN"
echo "========================================"
echo ""

echo "1. Checking OpenDKIM service status:"
systemctl status opendkim --no-pager | head -10

echo ""
echo "2. Checking key files:"
ls -la /etc/opendkim/keys/$DOMAIN/

echo ""
echo "3. Public key content:"
if [ -f "/etc/opendkim/keys/$DOMAIN/mail.txt" ]; then
    cat "/etc/opendkim/keys/$DOMAIN/mail.txt"
else
    echo "Public key file not found!"
fi

echo ""
echo "4. Testing DKIM key:"
opendkim-testkey -d $DOMAIN -s mail -vvv

echo ""
echo "5. Checking DNS record:"
dig +short TXT mail._domainkey.$DOMAIN

echo ""
echo "6. Testing OpenDKIM socket:"
nc -zv localhost 8891

echo ""
echo "7. Checking Postfix milter configuration:"
postconf | grep milter

echo ""
echo "8. Recent OpenDKIM log entries:"
grep opendkim /var/log/mail.log | tail -20

echo ""
echo "To regenerate keys, run: /usr/local/bin/dkim-regenerate $DOMAIN"
EOF
    
    chmod +x /usr/local/bin/dkim-troubleshoot
    
    # Create key regeneration script
    cat > /usr/local/bin/dkim-regenerate <<'EOF'
#!/bin/bash

DOMAIN="${1:-$(hostname -d)}"

if [ -z "$DOMAIN" ]; then
    echo "Usage: $0 <domain>"
    exit 1
fi

echo "Regenerating DKIM keys for $DOMAIN"
echo "===================================="

# Stop services
systemctl stop opendkim postfix

# Backup old keys
if [ -d "/etc/opendkim/keys/$DOMAIN" ]; then
    BACKUP_DIR="/etc/opendkim/keys/backups/$(date +%Y%m%d%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    mv "/etc/opendkim/keys/$DOMAIN" "$BACKUP_DIR/"
    echo "Old keys backed up to: $BACKUP_DIR"
fi

# Generate new keys
mkdir -p "/etc/opendkim/keys/$DOMAIN"
cd "/etc/opendkim/keys/$DOMAIN"
opendkim-genkey -b 2048 -s mail -d "$DOMAIN"
chown -R opendkim:opendkim "/etc/opendkim/keys/$DOMAIN"
chmod 600 mail.private
chmod 644 mail.txt

# Restart services
systemctl start opendkim postfix

echo ""
echo "New DKIM key generated!"
echo ""
echo "NEW DNS RECORD REQUIRED:"
echo "========================"
cat mail.txt
echo ""
echo "Update your DNS TXT record for: mail._domainkey.$DOMAIN"
echo ""
echo "After updating DNS, verify with: opendkim-testkey -d $DOMAIN -s mail -vvv"
EOF
    
    chmod +x /usr/local/bin/dkim-regenerate
}

# Export functions
export -f setup_opendkim setup_spf setup_dmarc verify_dkim get_dkim_value
export -f regenerate_dkim_keys create_dkim_troubleshoot_script
