#!/bin/bash

# =================================================================
# MULTI-IP MAIL SERVER - MAIN EXECUTION SCRIPT
# Version: 16.0.2
# This file is generated by install.sh - DO NOT RUN DIRECTLY
# =================================================================

set -e
set -o pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MODULES_DIR="${SCRIPT_DIR}/modules"

# Colors
GREEN='\033[38;5;208m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[1;33m'
NC='\033[0m'

# Logging
LOG_FILE="/var/log/mail-installer-$(date +%Y%m%d-%H%M%S).log"
exec > >(tee -a "$LOG_FILE")
exec 2>&1

# Basic output functions (in case modules don't load)
print_message() {
    echo -e "${GREEN}$1${NC}"
}

print_error() {
    echo -e "${RED}$1${NC}" >&2
}

print_warning() {
    echo -e "${YELLOW}$1${NC}"
}

print_header() {
    echo -e "${BLUE}==================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}==================================================${NC}"
}

print_header "Starting Mail Server Installation"
echo ""

# Load modules if available
echo "Loading installer modules..."

LOADED_MODULES=0
MISSING_MODULES=0

# Try to load each module
for module_file in "$MODULES_DIR"/*.sh; do
    if [ -f "$module_file" ]; then
        module_name=$(basename "$module_file")
        echo -n "  Loading: $module_name... "
        if source "$module_file" 2>/dev/null; then
            echo "✓"
            LOADED_MODULES=$((LOADED_MODULES + 1))
        else
            echo "✗ (failed)"
            MISSING_MODULES=$((MISSING_MODULES + 1))
        fi
    fi
done

echo ""
if [ $LOADED_MODULES -gt 0 ]; then
    echo "✓ Loaded $LOADED_MODULES modules"
fi
if [ $MISSING_MODULES -gt 0 ]; then
    echo "⚠ Warning: $MISSING_MODULES modules failed to load"
    echo "  Installation will continue with basic functionality"
fi
echo ""

# ===================================================================
# CONFIGURATION GATHERING
# ===================================================================

print_header "Configuration"

# Get domain name
while true; do
    read -p "Enter your domain name (e.g., example.com): " DOMAIN_NAME
    if [[ "$DOMAIN_NAME" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]*\.[a-zA-Z]{2,}$ ]]; then
        break
    else
        echo "Invalid domain format. Please use format: example.com"
    fi
done
export DOMAIN_NAME

# Set hostname
HOSTNAME="mail.$DOMAIN_NAME"
echo "Mail server hostname will be: $HOSTNAME"
export HOSTNAME

# Get admin email
while true; do
    read -p "Enter admin email address: " ADMIN_EMAIL
    if [[ "$ADMIN_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        break
    else
        echo "Invalid email format. Please enter a valid email address."
    fi
done
export ADMIN_EMAIL

# Get server IP
echo ""
echo "Detecting server IP address..."
PRIMARY_IP=$(curl -s --max-time 5 https://ipinfo.io/ip 2>/dev/null || \
            curl -s --max-time 5 https://api.ipify.org 2>/dev/null || \
            hostname -I | awk '{print $1}' 2>/dev/null || \
            echo "")

if [ -z "$PRIMARY_IP" ]; then
    read -p "Could not detect IP. Please enter server IP address: " PRIMARY_IP
else
    echo "Detected IP: $PRIMARY_IP"
    read -p "Is this correct? (y/n): " CONFIRM_IP
    if [[ "${CONFIRM_IP,,}" != "y" ]]; then
        read -p "Enter correct IP address: " PRIMARY_IP
    fi
fi

# Validate IP
while ! [[ "$PRIMARY_IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; do
    echo "Invalid IP format."
    read -p "Enter server IP address: " PRIMARY_IP
done

export PRIMARY_IP
export IP_ADDRESSES=("$PRIMARY_IP")

# Multi-IP configuration (optional)
echo ""
read -p "Configure additional IP addresses? (y/n) [n]: " MULTI_IP
if [[ "${MULTI_IP,,}" == "y" ]]; then
    echo "Enter additional IP addresses (one per line, empty to finish):"
    while true; do
        read -p "IP: " ip
        [ -z "$ip" ] && break
        if [[ "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            IP_ADDRESSES+=("$ip")
            echo "Added: $ip"
        else
            echo "Invalid IP format, skipping"
        fi
    done
fi
export IP_ADDRESSES

# Summary
echo ""
print_header "Installation Summary"
echo "Domain: $DOMAIN_NAME"
echo "Hostname: $HOSTNAME"
echo "Admin Email: $ADMIN_EMAIL"
echo "Primary IP: $PRIMARY_IP"
if [ ${#IP_ADDRESSES[@]} -gt 1 ]; then
    echo "Additional IPs: ${IP_ADDRESSES[@]:1}"
fi
echo ""
read -p "Proceed with installation? (y/n): " FINAL_CONFIRM
if [[ "${FINAL_CONFIRM,,}" != "y" ]]; then
    echo "Installation cancelled."
    exit 0
fi

# ===================================================================
# INSTALLATION PROCESS
# ===================================================================

print_header "Installing Mail Server Components"

# Step 1: Update system
echo ""
echo "Step 1/8: Updating system packages..."
apt-get update -y
DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

# Step 2: Set hostname
echo ""
echo "Step 2/8: Setting hostname..."
hostnamectl set-hostname "$HOSTNAME" 2>/dev/null || hostname "$HOSTNAME"
echo "$HOSTNAME" > /etc/hostname
echo "127.0.0.1 localhost" > /etc/hosts
echo "$PRIMARY_IP $HOSTNAME ${HOSTNAME%%.*}" >> /etc/hosts

# Step 3: Install essential packages
echo ""
echo "Step 3/8: Installing essential packages..."
DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl wget git sudo ufw fail2ban \
    software-properties-common apt-transport-https \
    ca-certificates gnupg lsb-release \
    net-tools dnsutils

# Step 4: Install mail server packages
echo ""
echo "Step 4/8: Installing mail server packages..."

# Pre-configure Postfix to avoid prompts
debconf-set-selections <<< "postfix postfix/mailname string $HOSTNAME"
debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"

DEBIAN_FRONTEND=noninteractive apt-get install -y \
    postfix postfix-mysql postfix-pcre \
    dovecot-core dovecot-imapd dovecot-pop3d dovecot-lmtpd dovecot-mysql \
    mysql-server mysql-client \
    opendkim opendkim-tools \
    spamassassin spamc \
    certbot

# Step 5: Basic MySQL setup
echo ""
echo "Step 5/8: Setting up database..."

# Generate MySQL password
DB_PASSWORD=$(openssl rand -base64 32)
echo "$DB_PASSWORD" > /root/.mail_db_password
chmod 600 /root/.mail_db_password

# Start MySQL
systemctl start mysql 2>/dev/null || systemctl start mariadb 2>/dev/null

# Create database
mysql <<EOF 2>/dev/null || true
CREATE DATABASE IF NOT EXISTS mailserver;
CREATE USER IF NOT EXISTS 'mailuser'@'localhost' IDENTIFIED BY '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON mailserver.* TO 'mailuser'@'localhost';
FLUSH PRIVILEGES;
EOF

# Step 6: Basic Postfix configuration
echo ""
echo "Step 6/8: Configuring Postfix..."

# Basic main.cf
cat > /etc/postfix/main.cf <<EOF
# Basic Postfix configuration
myhostname = $HOSTNAME
mydomain = $DOMAIN_NAME
myorigin = \$mydomain
inet_interfaces = all
inet_protocols = ipv4
mydestination = 
relay_domains = 
mynetworks = 127.0.0.0/8

# TLS
smtpd_tls_cert_file = /etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file = /etc/ssl/private/ssl-cert-snakeoil.key
smtpd_use_tls = yes
smtpd_tls_auth_only = yes

# Restrictions
smtpd_recipient_restrictions = 
    permit_mynetworks,
    permit_sasl_authenticated,
    reject_unauth_destination

# Size limits
message_size_limit = 52428800
mailbox_size_limit = 0

# Virtual domains
virtual_transport = lmtp:unix:private/dovecot-lmtp
virtual_mailbox_domains = mysql:/etc/postfix/mysql-virtual-domains.cf
virtual_mailbox_maps = mysql:/etc/postfix/mysql-virtual-mailboxes.cf
virtual_alias_maps = mysql:/etc/postfix/mysql-virtual-aliases.cf

# SASL
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth
smtpd_sasl_auth_enable = yes

# Milters
milter_protocol = 6
milter_default_action = accept
smtpd_milters = inet:localhost:8891
non_smtpd_milters = inet:localhost:8891
EOF

# Step 7: Basic Dovecot configuration
echo ""
echo "Step 7/8: Configuring Dovecot..."

# Create mail user
groupadd -g 5000 vmail 2>/dev/null || true
useradd -g vmail -u 5000 vmail -d /var/vmail -m 2>/dev/null || true

# Basic dovecot.conf
cat > /etc/dovecot/conf.d/10-mail.conf <<EOF
mail_location = maildir:/var/vmail/%d/%n
mail_privileged_group = vmail
mail_uid = vmail
mail_gid = vmail
first_valid_uid = 5000
last_valid_uid = 5000
EOF

cat > /etc/dovecot/conf.d/10-auth.conf <<EOF
disable_plaintext_auth = yes
auth_mechanisms = plain login
!include auth-sql.conf.ext
EOF

cat > /etc/dovecot/conf.d/auth-sql.conf.ext <<EOF
passdb {
  driver = sql
  args = /etc/dovecot/dovecot-sql.conf.ext
}
userdb {
  driver = static
  args = uid=vmail gid=vmail home=/var/vmail/%d/%n
}
EOF

# Step 8: Setup OpenDKIM
echo ""
echo "Step 8/8: Setting up DKIM..."

mkdir -p /etc/opendkim/keys/$DOMAIN_NAME
cd /etc/opendkim/keys/$DOMAIN_NAME
opendkim-genkey -s mail -d $DOMAIN_NAME
chown -R opendkim:opendkim /etc/opendkim
# --- START: Key Permission FIX ---
# Set strict permissions on the private key to fix the "key not secure" error.
chmod 600 /etc/opendkim/keys/$DOMAIN_NAME/mail.private
# --- END: Key Permission FIX ---

cat > /etc/opendkim.conf <<EOF
AutoRestart             Yes
AutoRestartRate         10/1h
UMask                   002
Syslog                  yes
SyslogSuccess           Yes
LogWhy                  Yes
Canonicalization        relaxed/simple
ExternalIgnoreList      refile:/etc/opendkim/TrustedHosts
InternalHosts           refile:/etc/opendkim/TrustedHosts
KeyTable                refile:/etc/opendkim/KeyTable
SigningTable            refile:/etc/opendkim/SigningTable
Mode                    sv
PidFile                 /var/run/opendkim/opendkim.pid
SignatureAlgorithm      rsa-sha256
UserID                  opendkim:opendkim
Socket                  inet:8891@localhost
EOF

echo "127.0.0.1" > /etc/opendkim/TrustedHosts
echo "localhost" >> /etc/opendkim/TrustedHosts
echo ".$DOMAIN_NAME" >> /etc/opendkim/TrustedHosts

echo "mail._domainkey.$DOMAIN_NAME $DOMAIN_NAME:mail:/etc/opendkim/keys/$DOMAIN_NAME/mail.private" > /etc/opendkim/KeyTable
# --- START: SigningTable FIX ---
# Rule 1: Sign emails from the main domain
echo "*@$DOMAIN_NAME mail._domainkey.$DOMAIN_NAME" > /etc/opendkim/SigningTable
# Rule 2: Also sign emails from any subdomain
echo "*@*.$DOMAIN_NAME mail._domainkey.$DOMAIN_NAME" >> /etc/opendkim/SigningTable
# --- END: SigningTable FIX ---

# Restart services
systemctl restart postfix
systemctl restart dovecot
systemctl restart opendkim

# ===================================================================
# CREATE DNS RECORDS FILE
# ===================================================================

print_header "Generating DNS Records"

DKIM_KEY=$(cat /etc/opendkim/keys/$DOMAIN_NAME/mail.txt | grep -oP '(?<=p=)[^"]+' | tr -d '\n\t ')

cat > /root/dns-records-$DOMAIN_NAME.txt <<EOF
DNS RECORDS FOR $DOMAIN_NAME
Generated: $(date)
================================================================================

REQUIRED DNS RECORDS:

1. A Record:
   Type: A
   Name: mail
   Value: $PRIMARY_IP
   TTL: 3600

2. MX Record:
   Type: MX
   Name: @ (or $DOMAIN_NAME)
   Value: mail.$DOMAIN_NAME
   Priority: 10
   TTL: 3600

3. SPF Record:
   Type: TXT
   Name: @ (or $DOMAIN_NAME)
   Value: "v=spf1 mx a ip4:$PRIMARY_IP ~all"
   TTL: 3600

4. DKIM Record:
   Type: TXT
   Name: mail._domainkey
   Value: "v=DKIM1; k=rsa; p=$DKIM_KEY"
   TTL: 3600

5. DMARC Record:
   Type: TXT
   Name: _dmarc
   Value: "v=DMARC1; p=none; rua=mailto:$ADMIN_EMAIL"
   TTL: 3600

6. Reverse DNS (PTR):
   Contact your hosting provider to set:
   $PRIMARY_IP -> mail.$DOMAIN_NAME

================================================================================
EOF

# ===================================================================
# COMPLETION
# ===================================================================

print_header "Installation Complete!"
echo ""
echo "✓ Mail server has been installed successfully!"
echo ""
echo "Configuration:"
echo "  Domain: $DOMAIN_NAME"
echo "  Hostname: $HOSTNAME"
echo "  Admin Email: $ADMIN_EMAIL"
echo "  Primary IP: $PRIMARY_IP"
echo ""
echo "IMPORTANT FILES:"
echo "  DNS Records: /root/dns-records-$DOMAIN_NAME.txt"
echo "  DB Password: /root/.mail_db_password"
echo ""
echo "NEXT STEPS:"
echo "1. Add the DNS records from /root/dns-records-$DOMAIN_NAME.txt"
echo "2. Wait for DNS propagation (5-30 minutes)"
echo "3. Get SSL certificate: certbot certonly --standalone -d $HOSTNAME"
echo "4. Test email delivery"
echo ""
echo "Services Status:"
systemctl is-active postfix && echo "  Postfix: ✓ Running" || echo "  Postfix: ✗ Not running"
systemctl is-active dovecot && echo "  Dovecot: ✓ Running" || echo "  Dovecot: ✗ Not running"
systemctl is-active opendkim && echo "  OpenDKIM: ✓ Running" || echo "  OpenDKIM: ✗ Not running"
echo ""
echo "Log file: $LOG_FILE"
echo ""
echo "Installation completed at: $(date)"
