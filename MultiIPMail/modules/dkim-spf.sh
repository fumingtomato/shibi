#!/bin/bash

# =================================================================
# DKIM AND SPF CONFIGURATION MODULE - FIXED VERSION
# Email authentication setup for deliverability
# Fixed: Key generation, DNS record formatting, proper exports
# =================================================================

# Global variables for DKIM configuration
export DKIM_SELECTOR="mail"
export DKIM_KEY_SIZE="1024"
export DKIM_CONFIG_DIR="/etc/opendkim"
export DKIM_KEY_DIR="/etc/opendkim/keys"
export DKIM_SOCKET="inet:8891@localhost"

# Check OpenDKIM installation
check_opendkim_installation() {
    if ! command -v opendkim &>/dev/null; then
        print_message "Installing OpenDKIM..."
        apt-get update
        apt-get install -y opendkim opendkim-tools
    fi
    
    if ! command -v opendkim-genkey &>/dev/null; then
        print_error "OpenDKIM tools not found"
        return 1
    fi
    
    return 0
}

# Setup OpenDKIM for email authentication
setup_opendkim() {
    local domain=$1
    
    print_header "Setting Up OpenDKIM for Email Authentication"
    
    # Check installation
    check_opendkim_installation || return 1
    
    # Stop OpenDKIM during configuration
    systemctl stop opendkim 2>/dev/null || true
    
    # Create directories with proper permissions
    create_dkim_directories
    
    # Generate DKIM keys for domain
    generate_dkim_keys "$domain"
    
    # Configure OpenDKIM
    configure_opendkim "$domain"
    
    # Setup key table and signing table
    setup_dkim_tables "$domain"
    
    # Configure trusted hosts
    setup_trusted_hosts
    
    # Integrate with Postfix
    integrate_dkim_with_postfix
    
    # Start OpenDKIM service
    start_opendkim_service
    
    # Display DKIM record for DNS
    display_dkim_record "$domain"
    
    # Create verification script
    create_dkim_verification_script "$domain"
    
    print_message "✓ OpenDKIM setup completed"
    return 0
}

# Create DKIM directories with proper permissions
create_dkim_directories() {
    print_message "Creating DKIM directories..."
    
    # Create main directories
    mkdir -p "$DKIM_CONFIG_DIR"
    mkdir -p "$DKIM_KEY_DIR"
    
    # Create opendkim user if not exists
    if ! id -u opendkim &>/dev/null; then
        useradd -r -g opendkim -G mail -s /usr/sbin/nologin opendkim
    fi
    
    # Set ownership and permissions
    chown -R opendkim:opendkim "$DKIM_CONFIG_DIR"
    chmod 750 "$DKIM_CONFIG_DIR"
    chmod 750 "$DKIM_KEY_DIR"
}

# Generate DKIM keys for domain
generate_dkim_keys() {
    local domain=$1
    local key_dir="$DKIM_KEY_DIR/$domain"
    
    print_message "Generating DKIM keys for $domain..."
    
    # Remove old keys if they exist
    if [ -d "$key_dir" ]; then
        print_warning "Removing existing keys for $domain..."
        rm -rf "$key_dir"
    fi
    
    # Create domain key directory
    mkdir -p "$key_dir"
    cd "$key_dir" || return 1
    
    # Generate new key with 1024 bits for better compatibility
    print_message "Generating ${DKIM_KEY_SIZE}-bit key..."
    opendkim-genkey -b "$DKIM_KEY_SIZE" -s "$DKIM_SELECTOR" -d "$domain" -v
    
    # Verify key generation
    if [ ! -f "${DKIM_SELECTOR}.private" ] || [ ! -f "${DKIM_SELECTOR}.txt" ]; then
        print_error "Failed to generate DKIM keys"
        return 1
    fi
    
    # Set proper permissions
    chown opendkim:opendkim "${DKIM_SELECTOR}.private" "${DKIM_SELECTOR}.txt"
    chmod 600 "${DKIM_SELECTOR}.private"
    chmod 644 "${DKIM_SELECTOR}.txt"
    
    print_message "✓ DKIM keys generated successfully"
    cd - >/dev/null
    
    return 0
}

# Configure OpenDKIM main configuration
configure_opendkim() {
    local domain=$1
    
    print_message "Configuring OpenDKIM..."
    
    cat > "$DKIM_CONFIG_DIR/opendkim.conf" <<EOF
# OpenDKIM Configuration
# Generated by Mail Server Installer

# Basic settings
AutoRestart             Yes
AutoRestartRate         10/1h
UMask                   002
Syslog                  Yes
SyslogSuccess           Yes
LogWhy                  Yes
PidFile                 /run/opendkim/opendkim.pid

# User and group
UserID                  opendkim:opendkim
TemporaryDirectory      /var/tmp

# Signing/Verification mode
Mode                    sv
Canonicalization        relaxed/simple
SignatureAlgorithm      rsa-sha256

# Key handling
KeyTable                refile:$DKIM_CONFIG_DIR/KeyTable
SigningTable            refile:$DKIM_CONFIG_DIR/SigningTable
ExternalIgnoreList      refile:$DKIM_CONFIG_DIR/TrustedHosts
InternalHosts           refile:$DKIM_CONFIG_DIR/TrustedHosts

# Socket configuration
Socket                  $DKIM_SOCKET

# DNS settings
TrustAnchorFile         /usr/share/dns/root.key
RequireSafeKeys         No

# Headers to sign
OversignHeaders         From,Sender,Reply-To,Subject,Date,Message-Id,To,Cc,MIME-Version

# Additional security
SubDomains              Yes
ClockDrift              300

# Statistics (optional)
Statistics              /var/log/opendkim/stats.dat
EOF
    
    print_message "✓ OpenDKIM configuration created"
}

# Setup DKIM key table and signing table
setup_dkim_tables() {
    local domain=$1
    
    print_message "Setting up DKIM tables..."
    
    # KeyTable - maps key names to key files
    cat > "$DKIM_CONFIG_DIR/KeyTable" <<EOF
# KeyTable - Maps key names to key files
# Format: keyname domainname:selector:privatekeypath

${DKIM_SELECTOR}._domainkey.${domain} ${domain}:${DKIM_SELECTOR}:${DKIM_KEY_DIR}/${domain}/${DKIM_SELECTOR}.private
EOF
    
    # SigningTable - determines which keys to use for signing
    cat > "$DKIM_CONFIG_DIR/SigningTable" <<EOF
# SigningTable - Determines which keys to use for signing
# Format: pattern keyname

*@${domain} ${DKIM_SELECTOR}._domainkey.${domain}
*@*.${domain} ${DKIM_SELECTOR}._domainkey.${domain}
EOF
    
    # Handle multiple domains if configured
    if [ ! -z "${IP_DOMAINS}" ]; then
        for ip_domain in "${IP_DOMAINS[@]}"; do
            if [ "$ip_domain" != "$domain" ] && [ ! -z "$ip_domain" ]; then
                # Generate keys for additional domain
                generate_dkim_keys "$ip_domain"
                
                # Add to tables
                echo "${DKIM_SELECTOR}._domainkey.${ip_domain} ${ip_domain}:${DKIM_SELECTOR}:${DKIM_KEY_DIR}/${ip_domain}/${DKIM_SELECTOR}.private" >> "$DKIM_CONFIG_DIR/KeyTable"
                echo "*@${ip_domain} ${DKIM_SELECTOR}._domainkey.${ip_domain}" >> "$DKIM_CONFIG_DIR/SigningTable"
                echo "*@*.${ip_domain} ${DKIM_SELECTOR}._domainkey.${ip_domain}" >> "$DKIM_CONFIG_DIR/SigningTable"
            fi
        done
    fi
    
    # Set permissions
    chown opendkim:opendkim "$DKIM_CONFIG_DIR/KeyTable" "$DKIM_CONFIG_DIR/SigningTable"
    chmod 644 "$DKIM_CONFIG_DIR/KeyTable" "$DKIM_CONFIG_DIR/SigningTable"
    
    print_message "✓ DKIM tables configured"
}

# Setup trusted hosts for DKIM signing
setup_trusted_hosts() {
    print_message "Setting up trusted hosts..."
    
    cat > "$DKIM_CONFIG_DIR/TrustedHosts" <<EOF
# Trusted Hosts - IPs/domains that can send through this server
127.0.0.1
::1
localhost
EOF
    
    # Add server IPs
    if [ ! -z "${IP_ADDRESSES}" ]; then
        for ip in "${IP_ADDRESSES[@]}"; do
            echo "$ip" >> "$DKIM_CONFIG_DIR/TrustedHosts"
        done
    fi
    
    # Add domains
    if [ ! -z "$DOMAIN_NAME" ]; then
        echo "$DOMAIN_NAME" >> "$DKIM_CONFIG_DIR/TrustedHosts"
        echo "*.$DOMAIN_NAME" >> "$DKIM_CONFIG_DIR/TrustedHosts"
    fi
    
    # Add hostnames
    if [ ! -z "${HOSTNAMES}" ]; then
        for hostname in "${HOSTNAMES[@]}"; do
            echo "$hostname" >> "$DKIM_CONFIG_DIR/TrustedHosts"
        done
    fi
    
    chown opendkim:opendkim "$DKIM_CONFIG_DIR/TrustedHosts"
    chmod 644 "$DKIM_CONFIG_DIR/TrustedHosts"
    
    print_message "✓ Trusted hosts configured"
}

# Integrate DKIM with Postfix
integrate_dkim_with_postfix() {
    print_message "Integrating OpenDKIM with Postfix..."
    
    # Configure Postfix to use OpenDKIM
    postconf -e "milter_protocol = 6"
    postconf -e "milter_default_action = accept"
    postconf -e "smtpd_milters = $DKIM_SOCKET"
    postconf -e "non_smtpd_milters = $DKIM_SOCKET"
    
    # Create systemd override for OpenDKIM
    mkdir -p /etc/systemd/system/opendkim.service.d
    cat > /etc/systemd/system/opendkim.service.d/override.conf <<EOF
[Service]
UMask=002
ExecStart=
ExecStart=/usr/sbin/opendkim -f -x /etc/opendkim/opendkim.conf
Restart=on-failure
RestartSec=10s
EOF
    
    systemctl daemon-reload
    
    print_message "✓ OpenDKIM integrated with Postfix"
}

# Start OpenDKIM service
start_opendkim_service() {
    print_message "Starting OpenDKIM service..."
    
    # Create runtime directory
    mkdir -p /run/opendkim
    chown opendkim:opendkim /run/opendkim
    
    # Start and enable service
    if systemctl start opendkim; then
        systemctl enable opendkim
        
        # Wait for socket to be ready
        local max_wait=10
        local waited=0
        while [ $waited -lt $max_wait ]; do
            if nc -zv localhost 8891 2>&1 | grep -q succeeded; then
                print_message "✓ OpenDKIM is listening on port 8891"
                return 0
            fi
            sleep 1
            waited=$((waited + 1))
        done
        
        print_warning "OpenDKIM started but socket not responding"
    else
        print_error "Failed to start OpenDKIM"
        journalctl -u opendkim --no-pager -n 20
        return 1
    fi
}

# Extract and display DKIM record
display_dkim_record() {
    local domain=$1
    local key_file="$DKIM_KEY_DIR/$domain/${DKIM_SELECTOR}.txt"
    
    if [ ! -f "$key_file" ]; then
        print_error "DKIM key file not found: $key_file"
        return 1
    fi
    
    print_header "DKIM DNS Configuration"
    
    # Extract the public key
    local key_only=$(grep -oP '(?<=p=)[^"]+' "$key_file" | tr -d '\n\t\r ' | sed 's/[[:space:]]//g')
    
    # Build the complete DKIM record
    local dkim_record="v=DKIM1; k=rsa; p=${key_only}"
    
    # Calculate record length
    local record_length=${#dkim_record}
    
    echo "Add the following DNS TXT record:"
    echo ""
    echo "=========================================="
    echo "Type: TXT"
    echo "Name: ${DKIM_SELECTOR}._domainkey"
    echo "Value: ${dkim_record}"
    echo "=========================================="
    echo ""
    echo "Record length: ${record_length} characters"
    
    if [ $record_length -gt 255 ]; then
        print_warning "Note: Record exceeds 255 characters. Some DNS providers may require splitting."
        echo ""
        echo "If your DNS provider requires splitting, use:"
        echo "\"v=DKIM1; k=rsa; \" \"p=${key_only:0:250}\" \"${key_only:250}\""
    fi
    
    # Save to file
    cat > "/root/dkim-record-${domain}.txt" <<EOF
DKIM DNS Record for ${domain}
Generated: $(date)

Add this TXT record to your DNS:
================================
Name: ${DKIM_SELECTOR}._domainkey
Value: ${dkim_record}

Record length: ${record_length} characters

VERIFICATION:
After adding to DNS, verify with:
1. dig TXT ${DKIM_SELECTOR}._domainkey.${domain}
2. opendkim-testkey -d ${domain} -s ${DKIM_SELECTOR} -vvv
3. Send test email to: check-auth@verifier.port25.com

Raw key file location: ${key_file}
EOF
    
    print_message "DKIM record saved to: /root/dkim-record-${domain}.txt"
}

# Get DKIM public key value for DNS
get_dkim_value() {
    local domain=$1
    local key_file="$DKIM_KEY_DIR/$domain/${DKIM_SELECTOR}.txt"
    
    if [ -f "$key_file" ]; then
        grep -oP '(?<=p=)[^"]+' "$key_file" | tr -d '\n\t\r ' | sed 's/[[:space:]]//g'
    else
        echo ""
    fi
}

# Setup SPF record
setup_spf() {
    local domain=$1
    local hostname=${2:-mail.$domain}
    
    print_header "SPF Configuration"
    
    # Build SPF record with all IPs
    local spf_record="v=spf1"
    
    # Add hostname for HELO
    spf_record="${spf_record} include:${hostname}"
    
    # Add all server IPs
    if [ ! -z "${IP_ADDRESSES}" ]; then
        for ip in "${IP_ADDRESSES[@]}"; do
            if [[ $ip =~ .*:.* ]]; then
                spf_record="${spf_record} ip6:${ip}"
            else
                spf_record="${spf_record} ip4:${ip}"
            fi
        done
    fi
    
    # Add standard mechanisms
    spf_record="${spf_record} mx a ~all"
    
    print_message "Add the following SPF records to DNS:"
    echo ""
    echo "=========================================="
    echo "Main SPF Record:"
    echo "Type: TXT"
    echo "Name: @ (or ${domain})"
    echo "Value: ${spf_record}"
    echo ""
    echo "Hostname SPF Record (prevents SPF_HELO_NONE):"
    echo "Type: TXT"
    echo "Name: ${hostname}"
    echo "Value: v=spf1 a -all"
    
    # Add SPF for numbered subdomains if multi-IP
    if [ ! -z "${HOSTNAMES}" ] && [ ${#HOSTNAMES[@]} -gt 1 ]; then
        echo ""
        echo "Additional hostname SPF records:"
        for host in "${HOSTNAMES[@]}"; do
            if [ "$host" != "$hostname" ]; then
                echo "Name: ${host}"
                echo "Value: v=spf1 a -all"
            fi
        done
    fi
    
    echo "=========================================="
    echo ""
    
    # Save to file
    cat > "/root/spf-record-${domain}.txt" <<EOF
SPF DNS Records for ${domain}
Generated: $(date)

MAIN SPF RECORD:
================
Type: TXT
Name: @ (or ${domain})
Value: ${spf_record}

HOSTNAME SPF RECORDS:
====================
Type: TXT
Name: ${hostname}
Value: v=spf1 a -all
EOF
    
    if [ ! -z "${HOSTNAMES}" ] && [ ${#HOSTNAMES[@]} -gt 1 ]; then
        echo "" >> "/root/spf-record-${domain}.txt"
        echo "Additional hostnames:" >> "/root/spf-record-${domain}.txt"
        for host in "${HOSTNAMES[@]}"; do
            echo "Name: ${host}" >> "/root/spf-record-${domain}.txt"
            echo "Value: v=spf1 a -all" >> "/root/spf-record-${domain}.txt"
            echo "" >> "/root/spf-record-${domain}.txt"
        done
    fi
    
    cat >> "/root/spf-record-${domain}.txt" <<EOF

NOTES:
- The ~all means soft fail (recommended for initial setup)
- Change to -all (hard fail) after testing
- The hostname SPF records prevent SPF_HELO_NONE warnings

VERIFICATION:
dig TXT ${domain}
dig TXT ${hostname}
EOF
    
    print_message "SPF records saved to: /root/spf-record-${domain}.txt"
}

# Setup DMARC record
setup_dmarc() {
    local domain=$1
    local email="${2:-postmaster@$domain}"
    
    print_header "DMARC Configuration"
    
    # Start with monitoring policy
    local dmarc_record="v=DMARC1; p=none; rua=mailto:${email}; ruf=mailto:${email}; fo=1; adkim=r; aspf=r; pct=100; rf=afrf; ri=86400"
    
    print_message "Add the following DMARC record to DNS:"
    echo ""
    echo "=========================================="
    echo "Type: TXT"
    echo "Name: _dmarc"
    echo "Value: ${dmarc_record}"
    echo "=========================================="
    echo ""
    echo "Policy progression:"
    echo "1. Start with p=none (monitoring) - CURRENT"
    echo "2. Move to p=quarantine after monitoring"
    echo "3. Finally use p=reject for full protection"
    echo ""
    
    # Save to file
    cat > "/root/dmarc-record-${domain}.txt" <<EOF
DMARC DNS Record for ${domain}
Generated: $(date)

MONITORING POLICY (Start here):
================================
Type: TXT
Name: _dmarc
Value: ${dmarc_record}

QUARANTINE POLICY (After 1-2 weeks):
=====================================
v=DMARC1; p=quarantine; rua=mailto:${email}; ruf=mailto:${email}; fo=1; adkim=r; aspf=r; pct=50; rf=afrf; ri=86400

REJECT POLICY (Final - maximum protection):
===========================================
v=DMARC1; p=reject; rua=mailto:${email}; ruf=mailto:${email}; fo=1; adkim=r; aspf=r; pct=100; rf=afrf; ri=86400

FIELD EXPLANATIONS:
- p: Policy (none/quarantine/reject)
- rua: Aggregate reports email
- ruf: Forensic reports email
- fo: Failure reporting options
- adkim: DKIM alignment mode
- aspf: SPF alignment mode
- pct: Percentage of messages to apply policy
- rf: Report format
- ri: Report interval

VERIFICATION:
dig TXT _dmarc.${domain}
EOF
    
    print_message "DMARC record saved to: /root/dmarc-record-${domain}.txt"
}

# Create DKIM verification script
create_dkim_verification_script() {
    local domain=$1
    
    cat > /usr/local/bin/verify-dkim <<EOF
#!/bin/bash

# DKIM Verification Script
DOMAIN="${domain}"
SELECTOR="${DKIM_SELECTOR}"

echo "DKIM Verification for \$DOMAIN"
echo "=============================="

# Check if OpenDKIM is running
echo -n "1. OpenDKIM service: "
if systemctl is-active --quiet opendkim; then
    echo "✓ Running"
else
    echo "✗ Not running"
    systemctl status opendkim --no-pager | head -10
fi

# Check key files
echo -n "2. DKIM private key: "
if [ -f "${DKIM_KEY_DIR}/\$DOMAIN/\${SELECTOR}.private" ]; then
    echo "✓ Present"
else
    echo "✗ Missing"
fi

# Check OpenDKIM socket
echo -n "3. OpenDKIM socket: "
if nc -zv localhost 8891 2>&1 | grep -q succeeded; then
    echo "✓ Listening"
else
    echo "✗ Not responding"
fi

# Check DNS record
echo "4. DNS record check:"
DNS_RECORD=\$(dig +short TXT \${SELECTOR}._domainkey.\$DOMAIN @8.8.8.8 2>/dev/null)
if [ ! -z "\$DNS_RECORD" ]; then
    echo "   ✓ DNS record found"
    echo "   Record: \$DNS_RECORD"
else
    echo "   ✗ DNS record not found"
fi

# Test with opendkim-testkey
echo ""
echo "5. OpenDKIM key test:"
opendkim-testkey -d \$DOMAIN -s \$SELECTOR -vvv

echo ""
echo "To send a test email:"
echo "  echo 'Test' | mail -s 'DKIM Test' check-auth@verifier.port25.com"
EOF
    
    chmod +x /usr/local/bin/verify-dkim
    
    print_message "DKIM verification script created at /usr/local/bin/verify-dkim"
}

# Create DKIM fix utility
create_dkim_fix_utility() {
    local domain=${1:-$DOMAIN_NAME}
    
    print_message "Creating DKIM fix utility..."
    
    cat > /usr/local/bin/fix-dkim-now <<EOF
#!/bin/bash

# DKIM Emergency Fix Utility
DOMAIN="\${1:-${domain}}"

echo "DKIM Emergency Fix for: \$DOMAIN"
echo "================================"

# Check root
if [ "\$(id -u)" != "0" ]; then
    echo "Error: Run as root"
    exit 1
fi

# Stop services
systemctl stop opendkim postfix

# Backup old keys
if [ -d "${DKIM_KEY_DIR}/\$DOMAIN" ]; then
    mv "${DKIM_KEY_DIR}/\$DOMAIN" "${DKIM_KEY_DIR}/\$DOMAIN.backup.\$(date +%s)"
fi

# Generate new keys
mkdir -p "${DKIM_KEY_DIR}/\$DOMAIN"
cd "${DKIM_KEY_DIR}/\$DOMAIN"
opendkim-genkey -b 1024 -s ${DKIM_SELECTOR} -d "\$DOMAIN"
chown -R opendkim:opendkim "${DKIM_KEY_DIR}/\$DOMAIN"
chmod 600 ${DKIM_SELECTOR}.private

# Update tables
echo "${DKIM_SELECTOR}._domainkey.\$DOMAIN \$DOMAIN:${DKIM_SELECTOR}:${DKIM_KEY_DIR}/\$DOMAIN/${DKIM_SELECTOR}.private" > ${DKIM_CONFIG_DIR}/KeyTable
echo "*@\$DOMAIN ${DKIM_SELECTOR}._domainkey.\$DOMAIN" > ${DKIM_CONFIG_DIR}/SigningTable

# Extract key
KEY=\$(grep -oP '(?<=p=)[^"]+' ${DKIM_SELECTOR}.txt | tr -d '\n\t\r ')
echo ""
echo "NEW DKIM RECORD:"
echo "================"
echo "Name: ${DKIM_SELECTOR}._domainkey"
echo "Value: v=DKIM1; k=rsa; p=\$KEY"

# Start services
systemctl start opendkim postfix

echo ""
echo "Done! Update DNS and test with: opendkim-testkey -d \$DOMAIN -s ${DKIM_SELECTOR} -vvv"
EOF
    
    chmod +x /usr/local/bin/fix-dkim-now
    print_message "DKIM fix utility created at /usr/local/bin/fix-dkim-now"
}

# Create DKIM test script
create_dkim_test_script() {
    cat > /usr/local/bin/test-dkim <<'EOF'
#!/bin/bash

# Comprehensive DKIM Testing Script
DOMAIN="${1:-$(hostname -d)}"

echo "DKIM Configuration Test for $DOMAIN"
echo "====================================="

# Service status
echo -n "1. OpenDKIM service: "
systemctl is-active opendkim || echo "Not running"

# Key files
echo -n "2. DKIM keys: "
[ -f "/etc/opendkim/keys/$DOMAIN/mail.private" ] && echo "✓" || echo "✗"

# Socket test
echo -n "3. Port 8891: "
nc -zv localhost 8891 2>&1 | grep -q succeeded && echo "✓" || echo "✗"

# DNS check
echo "4. DNS record:"
dig +short TXT mail._domainkey.$DOMAIN @8.8.8.8

# Validation
echo "5. Validation:"
opendkim-testkey -d $DOMAIN -s mail -vvv 2>&1 | grep -E "key (OK|not found)"

echo ""
echo "Send test to: check-auth@verifier.port25.com"
EOF
    
    chmod +x /usr/local/bin/test-dkim
    print_message "DKIM test script created at /usr/local/bin/test-dkim"
}

# Verify DKIM configuration
verify_dkim() {
    local domain=$1
    
    print_header "Verifying DKIM Configuration"
    
    local all_good=true
    
    # Check service
    if systemctl is-active --quiet opendkim; then
        print_message "✓ OpenDKIM service is running"
    else
        print_error "✗ OpenDKIM service is not running"
        all_good=false
    fi
    
    # Check key files
    if [ -f "$DKIM_KEY_DIR/$domain/${DKIM_SELECTOR}.private" ]; then
        print_message "✓ DKIM private key exists"
    else
        print_error "✗ DKIM private key not found"
        all_good=false
    fi
    
    # Check socket
    if nc -zv localhost 8891 2>&1 | grep -q succeeded; then
        print_message "✓ OpenDKIM socket is listening"
    else
        print_error "✗ OpenDKIM socket not responding"
        all_good=false
    fi
    
    # Test key validity
    print_message "Testing DKIM key validity..."
    if opendkim-testkey -d "$domain" -s "$DKIM_SELECTOR" -vvv 2>&1 | grep -q "key OK"; then
        print_message "✓ DKIM key is valid and DNS record is correct"
    else
        print_warning "⚠ DKIM DNS record not found or not propagated yet"
    fi
    
    if [ "$all_good" = true ]; then
        print_message "✓ DKIM verification passed"
        return 0
    else
        print_warning "DKIM verification has issues"
        return 1
    fi
}

# Export all functions
export -f check_opendkim_installation setup_opendkim create_dkim_directories
export -f generate_dkim_keys configure_opendkim setup_dkim_tables
export -f setup_trusted_hosts integrate_dkim_with_postfix start_opendkim_service
export -f display_dkim_record get_dkim_value setup_spf setup_dmarc
export -f create_dkim_verification_script create_dkim_fix_utility
export -f create_dkim_test_script verify_dkim

# Export variables
export DKIM_SELECTOR DKIM_KEY_SIZE DKIM_CONFIG_DIR DKIM_KEY_DIR DKIM_SOCKET
