#!/bin/bash

# =================================================================
# DKIM AND SPF CONFIGURATION MODULE
# Email authentication setup for deliverability
# =================================================================

# Setup OpenDKIM for email authentication
setup_opendkim() {
    local domain=$1
    
    print_header "Setting Up OpenDKIM for Email Authentication"
    
    # Install OpenDKIM packages
    print_message "Installing OpenDKIM..."
    apt-get update
    apt-get install -y opendkim opendkim-tools
    
    # Stop OpenDKIM during configuration
    systemctl stop opendkim 2>/dev/null || true
    
    # Create directories
    mkdir -p /etc/opendkim/keys
    chown -R opendkim:opendkim /etc/opendkim
    
    # Generate signing key for the domain
    print_message "Generating DKIM keys for ${domain}..."
    mkdir -p /etc/opendkim/keys/${domain}
    cd /etc/opendkim/keys/${domain}
    opendkim-genkey -b 2048 -s mail -d ${domain}
    chown opendkim:opendkim mail.private
    chmod 600 mail.private
    
    # Configure OpenDKIM main config
    cat > /etc/opendkim.conf <<EOF
# OpenDKIM Configuration
# Generated by Mail Server Installer

# Basic settings
AutoRestart             Yes
AutoRestartRate         10/1h
UMask                   002
Syslog                  Yes
SyslogSuccess           Yes
LogWhy                  Yes

# Signing/Verification
Mode                    sv
Canonicalization        relaxed/simple
ExternalIgnoreList      refile:/etc/opendkim/TrustedHosts
InternalHosts           refile:/etc/opendkim/TrustedHosts
KeyTable                refile:/etc/opendkim/KeyTable
SigningTable            refile:/etc/opendkim/SigningTable
SignatureAlgorithm      rsa-sha256

# Socket
Socket                  inet:8891@localhost
PidFile                 /run/opendkim/opendkim.pid

# User
UserID                  opendkim:opendkim
TemporaryDirectory      /tmp

# Additional settings
OversignHeaders         From
TrustAnchorFile         /usr/share/dns/root.key
EOF
    
    # Setup trusted hosts (all server IPs and localhost)
    cat > /etc/opendkim/TrustedHosts <<EOF
127.0.0.1
::1
localhost
${domain}
*.${domain}
EOF
    
    # Add all configured server IPs to trusted hosts
    if [ ! -z "${IP_ADDRESSES}" ]; then
        for ip in ${IP_ADDRESSES[@]}; do
            echo "$ip" >> /etc/opendkim/TrustedHosts
        done
    fi
    
    # Setup key table
    echo "mail._domainkey.${domain} ${domain}:mail:/etc/opendkim/keys/${domain}/mail.private" > /etc/opendkim/KeyTable
    
    # Setup signing table
    echo "*@${domain} mail._domainkey.${domain}" > /etc/opendkim/SigningTable
    
    # Set proper permissions
    chown opendkim:opendkim /etc/opendkim/TrustedHosts
    chown opendkim:opendkim /etc/opendkim/KeyTable
    chown opendkim:opendkim /etc/opendkim/SigningTable
    chmod 644 /etc/opendkim/TrustedHosts
    chmod 644 /etc/opendkim/KeyTable
    chmod 644 /etc/opendkim/SigningTable
    
    # Configure Postfix to use OpenDKIM
    print_message "Configuring Postfix to use OpenDKIM..."
    postconf -e "milter_protocol = 6"
    postconf -e "milter_default_action = accept"
    postconf -e "smtpd_milters = inet:localhost:8891"
    postconf -e "non_smtpd_milters = inet:localhost:8891"
    
    # Configure default socket
    cat > /etc/default/opendkim <<EOF
# OpenDKIM default configuration
RUNDIR=/run/opendkim
SOCKET="inet:8891@localhost"
USER=opendkim
GROUP=opendkim
PIDFILE=\$RUNDIR/opendkim.pid
EXTRAAFTER=
EOF
    
    # Start and enable OpenDKIM
    systemctl daemon-reload
    systemctl start opendkim
    systemctl enable opendkim
    
    # Restart Postfix to apply changes
    systemctl restart postfix
    
    # Extract and display DKIM record
    print_header "DKIM Configuration Complete!"
    print_message "Add the following DNS TXT record for DKIM:"
    echo ""
    echo "=========================================="
    echo "DNS Record Type: TXT"
    echo "Name: mail._domainkey"
    echo "Value:"
    
    # Extract just the key part from the generated record
    local dkim_record=$(cat /etc/opendkim/keys/${domain}/mail.txt | grep -oP '(?<=p=)[^"]+' | tr -d '\n\t ')
    echo "v=DKIM1; k=rsa; p=${dkim_record}"
    echo "=========================================="
    echo ""
    
    # Save DKIM record to file
    cat > /root/dkim-record-${domain}.txt <<EOF
DKIM DNS Record for ${domain}
Generated: $(date)

Add this TXT record to your DNS:
Name: mail._domainkey
Value: v=DKIM1; k=rsa; p=${dkim_record}
EOF
    
    print_message "DKIM record also saved to: /root/dkim-record-${domain}.txt"
    
    return 0
}

# Setup SPF record
setup_spf() {
    local domain=$1
    
    print_header "SPF Configuration"
    
    # Build SPF record with all IPs
    local spf_record="v=spf1"
    
    # Add all server IPs
    if [ ! -z "${IP_ADDRESSES}" ]; then
        for ip in ${IP_ADDRESSES[@]}; do
            # Check if IPv4 or IPv6
            if [[ $ip =~ .*:.* ]]; then
                spf_record="${spf_record} ip6:${ip}"
            else
                spf_record="${spf_record} ip4:${ip}"
            fi
        done
    fi
    
    # Add domain and finish record
    spf_record="${spf_record} mx a ~all"
    
    print_message "Add the following DNS TXT record for SPF:"
    echo ""
    echo "=========================================="
    echo "DNS Record Type: TXT"
    echo "Name: @ (or ${domain})"
    echo "Value: ${spf_record}"
    echo "=========================================="
    echo ""
    
    # Save SPF record to file
    cat > /root/spf-record-${domain}.txt <<EOF
SPF DNS Record for ${domain}
Generated: $(date)

Add this TXT record to your DNS:
Name: @ (or ${domain})
Value: ${spf_record}
EOF
    
    print_message "SPF record saved to: /root/spf-record-${domain}.txt"
    
    return 0
}

# Setup DMARC record
setup_dmarc() {
    local domain=$1
    local email="postmaster@${domain}"
    
    print_header "DMARC Configuration"
    
    local dmarc_record="v=DMARC1; p=quarantine; rua=mailto:${email}; ruf=mailto:${email}; fo=1; adkim=r; aspf=r; pct=100; rf=afrf; ri=86400"
    
    print_message "Add the following DNS TXT record for DMARC:"
    echo ""
    echo "=========================================="
    echo "DNS Record Type: TXT"
    echo "Name: _dmarc"
    echo "Value: ${dmarc_record}"
    echo "=========================================="
    echo ""
    
    # Save DMARC record to file
    cat > /root/dmarc-record-${domain}.txt <<EOF
DMARC DNS Record for ${domain}
Generated: $(date)

Add this TXT record to your DNS:
Name: _dmarc
Value: ${dmarc_record}
EOF
    
    print_message "DMARC record saved to: /root/dmarc-record-${domain}.txt"
    
    return 0
}

# Function to verify DKIM is working
verify_dkim() {
    local domain=$1
    
    print_header "Verifying DKIM Configuration"
    
    # Check if OpenDKIM is running
    if systemctl is-active --quiet opendkim; then
        print_message "✓ OpenDKIM service is running"
    else
        print_error "✗ OpenDKIM service is not running"
        return 1
    fi
    
    # Test OpenDKIM configuration
    if opendkim-testkey -d ${domain} -s mail -vvv 2>&1 | grep -q "key OK"; then
        print_message "✓ DKIM key is valid"
    else
        print_warning "⚠ DKIM DNS record not found or not propagated yet"
        print_message "This is normal if you haven't added the DNS record yet"
    fi
    
    return 0
}

# Export functions
export -f setup_opendkim setup_spf setup_dmarc verify_dkim
